import React, { useMemo, useState } from "react";
import { useNavigate } from "react-router-dom";
import "../Notification.css";

export default function SellerNotifications() {
  const navigate = useNavigate();

  const [notifications, setNotifications] = useState(() => [
    { id: "s1", type: "ORDER_NEW", message: "‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ A", orderId: "ODR-240001", createdAt: Date.now() - 1000 * 60 * 15, read: false },
    { id: "s2", type: "STOCK_LOW", message: "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏ä‡∏¥‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", productId: "PRD-10001", createdAt: Date.now() - 1000 * 60 * 60 * 4, read: false },
    { id: "s3", type: "CUSTOMER_CONFIRMED", message: "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß", orderId: "ODR-239998", createdAt: Date.now() - 1000 * 60 * 60 * 26, read: true }
  ]);

  const unreadCount = useMemo(() => notifications.filter((n) => !n.read).length, [notifications]);
  const markRead  = (id) => setNotifications((prev) => prev.map((n) => (n.id === id ? { ...n, read: true } : n)));
  const clearAll  = () => setNotifications((prev) => prev.map((n) => ({ ...n, read: true })));
  const fmtTime   = (ts) => new Date(ts).toLocaleString();

  const badgeByType = (type) => {
    switch (type) {
      case "ORDER_NEW":          return <span className="badge badge-green">‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà</span>;
      case "STOCK_LOW":          return <span className="badge badge-orange">‡∏™‡∏ï‡πá‡∏≠‡∏Å</span>;
      case "CUSTOMER_CONFIRMED": return <span className="badge badge-blue">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô</span>;
      default:                   return <span className="badge badge-gray">‡∏£‡∏∞‡∏ö‡∏ö</span>;
    }
  };

  const handleShipNow = (orderId) => {
    window.dispatchEvent(new CustomEvent("order:shipped", { detail: { orderId, shopName: "‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô" } }));
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏°‡∏µ alert ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ
    // alert(`‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: ${orderId})`);
    setNotifications((prev) => prev.map((n) => (n.orderId === orderId ? { ...n, read: true } : n)));
  };

  return (
    <div className="notify-page">
      <div className="notify-wrapper">
        <div className="notify-content-box">
          <div className="notify-header"><h2>üîî ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ {unreadCount > 0 ? `(${unreadCount} ‡πÉ‡∏´‡∏°‡πà)` : ""}</h2></div>

          {notifications.length === 0 ? (
            <div className="notify-empty"><p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</p></div>
          ) : (
            <>
              <div className="notify-actions">
                <button type="button" className="btn" onClick={clearAll}>‡∏ó‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</button>
              </div>

              {notifications.map((n) => (
                <div key={n.id} className={`notify-item ${n.read ? "is-read" : ""}`}>
                  <div className="notify-left">
                    {badgeByType(n.type)}
                    <div className="notify-message">{n.message}</div>
                    <div className="notify-meta">{fmtTime(n.createdAt)}</div>
                  </div>
                  <div className="notify-right">
                    {n.type === "ORDER_NEW" && (
                      <>
                        <button
                          type="button"
                          className="btn btn-primary"
                          onClick={() => navigate(`/orders/${n.orderId}`)}
                        >
                          ‡∏î‡∏π‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                        </button>
                        <button type="button" className="btn" onClick={() => handleShipNow(n.orderId)}>
                          ‡∏Å‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
                        </button>
                      </>
                    )}

                    {n.type === "STOCK_LOW" && (
                      <button
                        type="button"
                        className="btn btn-primary"
                        onClick={() => navigate(`/admin/products/${n.productId}`)}
                      >
                        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å
                      </button>
                    )}

                    {n.type === "CUSTOMER_CONFIRMED" && n.orderId && (
                      <button
                        type="button"
                        className="btn btn-light"
                        onClick={() => navigate(`/orders/${n.orderId}`)}
                      >
                        ‡∏î‡∏π‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
                      </button>
                    )}

                    {!n.read && (
                      <button type="button" className="btn" onClick={() => markRead(n.id)}>‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß</button>
                    )}
                  </div>
                </div>
              ))}
            </>
          )}
        </div>
      </div>
    </div>
  );
}
